2.# Import necessary libraries
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the HR data
def load_data(file_path):
    try:
        data = pd.read_csv(file_path)
        return data
    except Exception as e:
        print("Error loading data:", str(e))

# Preprocess the data
def preprocess_data(data):
    try:
        # Drop any missing values
        data.dropna(inplace=True)
        
        # Encode categorical variables
        categorical_cols = data.select_dtypes(include=['object']).columns
        data[categorical_cols] = data[categorical_cols].apply(pd.Categorical)
        data[categorical_cols] = data[categorical_cols].apply(lambda x: x.cat.codes)
        
        # Split the data into features and target
        X = data.drop('attrition', axis=1)  # Replace 'attrition' with the actual target column name
        y = data['attrition']
        
        return X, y
    except Exception as e:
        print("Error preprocessing data:", str(e))

# Train a classification model
def train_model(X, y):
    try:
        # Split the data into training and testing sets
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
        
        # Train a random forest classifier
        model = RandomForestClassifier(n_estimators=100, random_state=42)
        model.fit(X_train, y_train)
        
        # Make predictions on the test set
        y_pred = model.predict(X_test)
        
        # Evaluate the model
        accuracy = accuracy_score(y_test, y_pred)
        report = classification_report(y_test, y_pred)
        matrix = confusion_matrix(y_test, y_pred)
        
        return accuracy, report, matrix
    except Exception as e:
        print("Error training model:", str(e))

# Main function
def main():
    file_path = 'hr_data.csv'  # Replace with the actual file path
    data = load_data(file_path)
    X, y = preprocess_data(data)
    accuracy, report, matrix = train_model(X, y)
    
    print("Model Accuracy:", accuracy)
    print("Classification Report:\n", report)
    print("Confusion Matrix:\n", matrix)

if __name__ == "__main__":
    main()
